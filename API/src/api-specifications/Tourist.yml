openapi: "3.0.0"
info:
  title: Mailer API
  version: 1.0.0
  description: API for mail.
components:
  schemas:
    ITouristCreateDTO:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        username:
          type: string
        password:
          type: string
        role:
          type: string
          enum: [Tourist]
        phone_number:
          type: string
        date_of_birth:
          type: string
          format: date
    ITouristUpdateDTO:
      type: object
      properties:
        name:
          type: string
        newEmail:
          type: string
        password:
          type: string
        phone_number:
          type: string
        job:
          type: string
        nation:
          type: string
        addresses:
          type: array
          items:
            type: string
    ITourist:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        username:
          type: string
        password:
          type: string
        role:
          type: string
        phone_number:
          type: string
        date_of_birth:
          type: string
          format: date
    ITouristOutputDTO:
      type: object
      properties:
        name:
          type: string
        username:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
        phone_number:
          type: string
        status:
          type: string
        date_of_birth:
          type: string
          format: date
        job:
          type: string
        nation:
          type: string
        wallet:
          type: number
        loyality_points:
          type: number
        badge:
          type: string
        addresses:
          type: array
          items:
            type: string
    ITouristNewUserDTO:
      type: object
      properties:
        user_id:
          type: string
        job:
          type: string
        nation:
          type: string
        date_of_birth:
          type: string
          format: date
tags:
  - name: Tourist
    description: Tourist management and retrieval
paths:
  /api/tourist/getTourist/{email}:
    get:
      tags:
        - Tourist
      summary: Retrieve tourist from system
      description: Retrieve data of tourist by email
      parameters:
        - in: path
          name: email
          required: true
          description: Email of the tourist
          schema:
            type: string
      responses:
        201:
          description: Tourist data.
        400:
          description: Bad request.
        500:
          description: Internal server error.
  /api/tourist/updateTourist/{searchEmail}:
    put:
      tags:
        - Tourist
      summary: Update tourist in system
      description: Update tourist data by email
      parameters:
        - in: path
          name: searchEmail
          required: true
          description: Email of the tourist to update for
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the tourist
                newEmail:
                  type: string
                  description: New email of the tourist
                password:
                  type: string
                  description: Password of the tourist
                phone_number:
                  type: string
                  description: Phone number of the tourist
                job:
                  type: string
                  description: Job of the tourist
                nation:
                  type: string
                  description: Nation of the tourist
                addresses:
                  type: array
                  items:
                    type: string
                  description: Addresses of the tourist
      responses:
        200:
          description: Updated Tourist data.
        400:
          description: Bad request.
        500:
          description: Internal server error.
  /api/tourist/createTourist:
    post:
      tags:
        - Tourist
      summary: Create tourist in system
      description: Create a new tourist in the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email of the tourist
                name:
                  type: string
                  description: Name of the tourist
                username:
                  type: string
                  description: Username of the tourist
                password:
                  type: string
                  description: Password of the tourist
                phone_number:
                  type: string
                  description: Phone number of the tourist
                date_of_birth:
                  type: string
                  format: date
                  description: Date of birth of the tourist
                job:
                  type: string
                  description: Job of the tourist
                nation:
                  type: string
                  description: Nation of the tourist
      responses:
        200:
          description: Tourist created data.
        400:
          description: Bad request.
        500:
          description: Internal server error.
  /api/tourist/rateAndCommentTourGuide/{tourist_id}:
    post:
      tags:
        - Tourist
      summary: Rate and comment tour guide
      description: Rate and comment tour guide
      parameters:
        - in: path
          name: tourist_id
          required: true
          description: Tourist id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tour_guide_email:
                  type: string
                  description: Email of the tour guide
                comment:
                  type: string
                  description: Comment of the tourist
                rating:
                  type: number
                  description: Rating of the tourist
      responses:
        200:
          description: Tourist rated and commented tour guide
        400:
          description: Bad request
        500:
          description: Internal server error
  /api/tourist/rateAndCommentItinerary/{tourist_id}:
    post:
      tags:
        - Tourist
      summary: Rate and comment itinerary
      description: Rate and comment itinerary
      parameters:
        - in: path
          name: tourist_id
          required: true
          description: Tourist id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                itinerary_id:
                  type: string
                  description: Itinerary id
                comment:
                  type: string
                  description: Comment of the tourist
                rating:
                  type: number
                  description: Rating of the tourist
      responses:
        201:
          description: Tourist rated and commented itinerary
        400:
          description: Bad request
        500:
          description: Internal server error
  /api/tourist/rateAndCommentActivity/{tourist_id}:
    post:
      tags:
        - Tourist
      summary: Rate and comment activity
      description: Rate and comment activity
      parameters:
        - in: path
          name: tourist_id
          required: true
          description: Tourist id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                activity_id:
                  type: string
                  description: Activity id
                comment:
                  type: string
                  description: Comment on the activity
                rating:
                  type: number
                  description: Rating on the activity
      responses:
        201:
          description: Tourist rated and commented activity
        400:
          description: Bad request
        500:
          description: Internal server error
  /api/tourist/deleteTouristAccountRequest/{email}:
    delete:
      tags:
        - Tourist
      summary: Request deletion for tourist
      description: Deletes the account + any comments, complaints, orders, and bookings made by this user.
      parameters:
        - in: path
          name: email
          required: true
          description: The tourist's email that they registered with
          schema:
            type: string
      responses:
        "200":
          description: Account successfully deleted
        "404":
          description: The email was unable to find a tourist with that email, or the person having that email is not a tourist

  /api/tourist/bookActivity:
    post:
      tags:
        - Tourist
      summary: Book an activity
      description:
        Book an activity for a tourist. If there is a promocode, then it will automatically check if it is valid apply it if needed. If there is no promocode
        simply leave it empty, or just don't send it as part of the request body. This is not fully tested, eshtem fe el lesa ma5alesh payment type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email of the tourist
                activity_id:
                  type: string
                  description: ID of the activity
                payment_type:
                  type: string
                  description: Payment type
                promoCode:
                  type: string
                  example: ipw0o29eugf
                  description: If the user inserted a promocode. If not, this should be either an empty string or just not sent as part of the request
      responses:
        200:
          description: Activity booked successfully
        400:
          description: Bad request or the promocode has expired
        404:
          description: Code does not even exist, cannot use it
        500:
          description: Internal server error
  /api/tourist/bookItinerary:
    post:
      tags:
        - Tourist
      summary: Book an itinerary
      description:
        Book an itinerary for a tourist. If there is a promocode, then it will automatically check if it is valid apply it if needed. If there is no promocode
        simply leave it empty, or just don't send it as part of the request body. This is not fully tested, eshtem fe el lesa ma5alesh payment type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email of the tourist
                itinerary_id:
                  type: string
                  description: ID of the itinerary
                time_to_attend:
                  type: string
                  description: Time chosen to attend the itinerary
                payment_type:
                  type: string
                  description: Payment type
                promoCode:
                  type: string
                  example: ipw0o29eugf
                  description: If the user inserted a promocode. If not, this should be either an empty string or just not sent as part of the request
      responses:
        200:
          description: Itinerary booked successfully
        400:
          description: Bad request or the promocode has expired
        404:
          description: Code does not even exist, cannot use it
        500:
          description: Internal server error
  /api/tourist/bookHistoricalLocation:
    post:
      tags:
        - Tourist
      summary: Book a historical location
      description: Book a historical location for a tourist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email of the tourist
                historical_location_id:
                  type: string
                  description: ID of the historical location
                payment_type:
                  type: string
                  description: Payment type
      responses:
        200:
          description: Historical location booked successfully
        400:
          description: Bad request
        500:
          description: Internal server error

  /api/tourist/recievePoints:
    put:
      tags:
        - Tourist
      summary: Recieve points
      description: Recieve points for a tourist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tourist_id:
                  type: string
                  description: tourist_id of the tourist
                amount:
                  type: number
                  description: Amount available
      responses:
        200:
          description: Points recieved successfully
        400:
          description: Bad request
        500:
          description: Internal server error

  /api/tourist/recieveBadge:
    put:
      tags:
        - Tourist
      summary: Recieve badge
      description: Recieve badge for a tourist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tourist_id:
                  type: string
                  description: tourist_id of the tourist
                points:
                  type: number
                  description: Points available
      responses:
        200:
          description: Badge recieved successfully
        400:
          description: Bad request
        500:
          description: Internal server error

  /api/tourist/redeemPoints:
    put:
      tags:
        - Tourist
      summary: Redeem points
      description: Redeem points for a tourist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: email of the tourist
                points:
                  type: number
                  description: points tourist wants to redeem
      responses:
        200:
          description: Points redeemed successfully
        400:
          description: Bad request
        500:
          description: Internal server error

  /api/tourist/checkItinerary/{tourist_id}:
    get:
      tags:
        - Tourist
      summary: Check itinerary
      description: Check itinerary for a tourist
      parameters:
        - in: path
          name: tourist_id
          required: true
          description: Tourist id
          schema:
            type: string
        - in: query
          name: itinerary_id
          required: true
          description: ID of the itinerary
          schema:
            type: string
      responses:
        200:
          description: Itinerary checked successfully
        400:
          description: Bad request
        500:
          description: Internal server error

  /api/tourist/checkTourGuide/{tourist_id}:
    get:
      tags:
        - Tourist
      summary: Check tour guide
      description: Check tour guide for a tourist
      parameters:
        - in: path
          name: tourist_id
          required: true
          description: Tourist id
          schema:
            type: string
        - in: query
          name: tour_guide_email
          required: true
          description: Email of the tour guide
          schema:
            type: string
      responses:
        200:
          description: Tour guide checked successfully
        400:
          description: Bad request
        500:
          description: Internal server error

  /api/tourist/checkActivity/{tourist_id}:
    get:
      tags:
        - Tourist
      summary: Check activity
      description: Check activity for a tourist
      parameters:
        - in: path
          name: tourist_id
          required: true
          description: Tourist id
          schema:
            type: string
        - in: query
          name: activity_id
          required: true
          description: Activity id
          schema:
            type: string
      responses:
        200:
          description: Activity checked successfully
        400:
          description: Bad request
        500:
          description: Internal server error
  /api/tourist/fileComplaint/{tourist_id}:
    post:
      tags:
        - Tourist
      summary: File complaint
      description: File complaint for a tourist
      parameters:
        - in: path
          name: tourist_id
          required: true
          description: Tourist id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Complaint of the tourist
                body:
                  type: string
                  description: Body of the complaint
                date:
                  type: string
                  format: date
                  description: Date of the complaint
      responses:
        201:
          description: Complaint filed successfully
        400:
          description: Bad request
        500:
          description: Internal server error

  /api/tourist/viewComplaints/{tourist_id}:
    get:
      tags:
        - Tourist
      summary: Get complaint
      description: Get complaint for a tourist
      parameters:
        - in: path
          name: tourist_id
          required: true
          description: Tourist id
          schema:
            type: string
      responses:
        201:
          description: Complaint retrieved successfully
        400:
          description: Bad request
        500:
          description: Internal server error

  /api/tourist/flagToRateAndCommentProduct/{tourist_id}:
    get:
      tags:
        - Tourist
      summary: Flag to rate and comment product
      description: Flag to rate and comment product for a tourist
      parameters:
        - in: path
          name: tourist_id
          required: true
          description: Tourist id
          schema:
            type: string
        - in: query
          name: product_id
          required: true
          description: Product id
          schema:
            type: string
      responses:
        201:
          description: Product flagged to rate and comment successfully
        400:
          description: Bad request
        500:
          description: Internal server error

  /api/tourist/rateAndCommentProduct/{tourist_id}:
    post:
      tags:
        - Tourist
      summary: Rate and comment product
      description: Rate and comment product for a tourist
      parameters:
        - in: path
          name: tourist_id
          required: true
          description: Tourist id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: string
                  description: Product id
                comment:
                  type: string
                  description: Comment of the tourist
                rating:
                  type: number
                  description: Rating of the tourist
      responses:
        201:
          description: Product rated and commented successfully
        400:
          description: Bad request
        500:
          description: Internal server error

  /api/tourist/cancelTicket/{tourist_id}:
    put:
      tags:
        - Tourist
      summary: Cancel ticket
      description: Cancel ticket for a tourist
      parameters:
        - in: path
          name: tourist_id
          required: true
          description: Tourist id
          schema:
            type: string
        - in: query
          name: ticket_id
          required: true
          description: Ticket id
          schema:
            type: string
      responses:
        201:
          description: Ticket cancelled successfully
        400:
          description: Bad request
        500:
          description: Internal server error
  /api/tourist/getPastActivityBookings/{email}:
    get:
      tags:
        - Tourist
      summary: Get past activity bookings
      description: Get past activity bookings for a tourist
      parameters:
        - in: path
          name: email
          required: true
          description: Email of the tourist
          schema:
            type: string
      responses:
        201:
          description: Past activity bookings retrieved successfully
        400:
          description: Bad request
        500:
          description: Internal server error
  /api/tourist/getUpcomingActivityBookings/{email}:
    get:
      tags:
        - Tourist
      summary: Get upcoming activity bookings
      description: Get upcoming activity bookings for a tourist
      parameters:
        - in: path
          name: email
          required: true
          description: Email of the tourist
          schema:
            type: string
      responses:
        201:
          description: Upcoming activity bookings retrieved successfully
        400:
          description: Bad request
        500:
          description: Internal server error
  /api/tourist/getPastItineraryBookings/{email}:
    get:
      tags:
        - Tourist
      summary: Get past itinerary bookings
      description: Get past itinerary bookings for a tourist
      parameters:
        - in: path
          name: email
          required: true
          description: Email of the tourist
          schema:
            type: string
      responses:
        201:
          description: Past itinerary bookings retrieved successfully
        400:
          description: Bad request
        500:
          description: Internal server error

  /api/tourist/getUpcomingItineraryBookings/{email}:
    get:
      tags:
        - Tourist
      summary: Get upcoming itinerary bookings
      description: Get upcoming itinerary bookings for a tourist
      parameters:
        - in: path
          name: email
          required: true
          description: Email of the tourist
          schema:
            type: string
      responses:
        201:
          description: Upcoming itinerary bookings retrieved successfully
        400:
          description: Bad request
        500:
          description: Internal server error
  /api/tourist/getPastHistoricalLocationBookings/{email}:
    get:
      tags:
        - Tourist
      summary: Get past historical location bookings
      description: Get past historical location bookings for a tourist
      parameters:
        - in: path
          name: email
          required: true
          description: Email of the tourist
          schema:
            type: string
      responses:
        201:
          description: Past historical location bookings retrieved successfully
        400:
          description: Bad request
        500:
          description: Internal server error
  /api/tourist/getUpcomingHistoricalLocationBookings/{email}:
    get:
      tags:
        - Tourist
      summary: Get upcoming historical location bookings
      description: Get upcoming historical location bookings for a tourist
      parameters:
        - in: path
          name: email
          required: true
          description: Email of the tourist
          schema:
            type: string
      responses:
        201:
          description: Upcoming historical location bookings retrieved successfully
        400:
          description: Bad request
        500:
          description: Internal server error
  /api/tourist/getMyTourGuides/{tourist_id}:
    get:
      tags:
        - Tourist
      summary: Get my tour guides
      description: Get my tour guides for a tourist
      parameters:
        - in: path
          name: tourist_id
          required: true
          description: Tourist id
          schema:
            type: string
      responses:
        200:
          description: Tour guides retrieved successfully
        400:
          description: Bad request
        500:
          description: Internal server error
  /api/tourist/createOrder:
    post:
      tags:
        - Tourist
      summary: Create order cart
      description:
        Create an order cart for a tourist. If there is a promocode, then it will automatically check if it is valid apply it if needed. If there is no promocode
        simply leave it empty, or just don't send it as part of the request body.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tourist_id:
                  type: string
                  description: ID of the tourist
                cart:
                  type: object
                  properties:
                    items:
                      type: array
                      items:
                        type: object
                        properties:
                          product_id:
                            type: string
                            description: ID of the product
                          quantity:
                            type: number
                            description: Quantity of the product
                      description: List of items in cart (product_id,quantity)
                    cost:
                      type: number
                      description: Total cost of the cart
                cost:
                  type: number
                  description: Total cost of the cart
                payment_type:
                  type: string
                  description: Payment type
                promoCode:
                  type: string
                  example: ipw0o29eugf
                  description: If the user inserted a promocode. If not, this should be either an empty string or just not sent as part of the request
      responses:
        200:
          description: Order cart created successfully
        400:
          description: Bad request
        500:
          description: Internal server error
  /api/tourist/getPastOrders/{email}:
    get:
      tags:
        - Tourist
      summary: Get past orders
      description: Get past orders for a tourist
      parameters:
        - in: path
          name: email
          required: true
          description: Email of the tourist
          schema:
            type: string
      responses:
        200:
          description: Past orders retrieved successfully
        400:
          description: Bad request or the promocode has expired
        404:
          description: Code does not even exist, cannot use it
        500:
          description: Internal server error
  /api/tourist/isValidPromo/{promoCode}:
    get:
      tags:
        - Tourist
        - Promo Code
      summary: Returns whether a promo code is valid or not
      description: For a promo code to be valid, it must 1) acutally exist in our database and 2) has not expired yet
      parameters:
        - in: path
          name: promoCode
          required: true
          description: promoCode we want to check. Typically is 11 letters long
          schema:
            type: string
            example: ipw0orieugf
      responses:
        "200":
          description: Code is valid, also returns the discount percentage
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      valid:
                        type: boolean
                        example: true
                      discount_percent:
                        type: integer
                        example: 20
                  message:
                    type: string
                    example: "Code is valid!"
                  status:
                    type: integer
                    example: 200
        "400":
          description: Code had expired, cannot use it
        "404":
          description: Code does not even exist, cannot use it
        "500":
          description: Internal server error
  /api/tourist/getCurrentOrders/{email}:
    get:
      tags:
        - Tourist
      summary: Get current orders
      description: Get current orders for a tourist
      parameters:
        - in: path
          name: email
          required: true
          description: Email of the tourist
          schema:
            type: string
      responses:
        200:
          description: Current orders retrieved successfully
        400:
          description: Bad request
        500:
          description: Internal server error

  /api/tourist/bookmarkActivity:
    post:
      tags:
        - Tourist
      summary: Bookmark an activity
      description: Bookmark an activity for a tourist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: email of the tourist
                activity_id:
                  type: string
                  description: ID of the activity
      responses:
        200:
          description: Activity bookmarked successfully
        400:
          description: Bad request
        500:
          description: Internal server error
  /api/tourist/unbookmarkActivity:
    delete:
      tags:
        - Tourist
      summary: Unbookmark an activity
      description: Unbookmark an activity for a tourist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: email of the tourist
                activity_id:
                  type: string
                  description: ID of the activity
      responses:
        200:
          description: Activity unbookmarked successfully
        400:
          description: Bad request
        500:
          description: Internal server error
  /api/tourist/getBookmarkedActivities/{email}:
    get:
      tags:
        - Tourist
      summary: Get bookmarked activities
      description: Get bookmarked activities for a tourist
      parameters:
        - in: path
          name: email
          required: true
          description: Email of the tourist
          schema:
            type: string
      responses:
        200:
          description: Bookmarked activities retrieved successfully
        400:
          description: Bad request
        500:
          description: Internal server error
  /api/tourist/getOrderDetails/{order_id}:
    get:
      tags:
        - Tourist
      summary: Get order details
      description: Get order details for a tourist
      parameters:
        - in: path
          name: order_id
          required: true
          description: ID of the order
          schema:
            type: string
      responses:
        200:
          description: Order details retrieved successfully
        400:
          description: Bad request
        500:
          description: Internal server error
  /api/tourist/cancelOrder/{order_id}:
    put:
      tags:
        - Tourist
      summary: Cancel order
      description: Cancel order for a tourist
      parameters:
        - in: path
          name: order_id
          required: true
          description: ID of the order
          schema:
            type: string
      responses:
        200:
          description: Order cancelled successfully
        400:
          description: Bad request
        500:
          description: Internal server error

  /api/tourist/addProductToWishlist/{email}:
    put:
      tags:
        - Tourist
        - Wishlist
      summary: Adds a product to the wishlist of a user. (law enta bet2ra el 7eta deeh,fakerny ashoof eh el hay7sal law el product et3amelaha archive)
      parameters:
        - in: path
          name: email
          required: true
          description: Email of the tourist
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: string
                  example: "6727d4abc143ff8b82b57877"
      responses:
        200:
          description: Successfully added product to wishlist
        400:
          description: The product is already added to the wishlist
        404:
          description: Could not find tourist/product using the email/product id
  /api/tourist/removeProductFromWishlist/{email}:
    delete:
      tags:
        - Tourist
        - Wishlist
      summary: Removes a product from a wishlist if it exists; if not, throws an error
      parameters:
        - in: path
          name: email
          required: true
          description: Email of the tourist
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: string
                  example: "6727d4abc143ff8b82b57877"
      responses:
        200:
          description: Successfully removed product to wishlist
        400:
          description: The product is already removed or could not be found in the wishlist
        404:
          description: Could not find tourist/product using the email/product id
  /api/tourist/viewWishlist/{email}:
    get:
      tags:
        - Tourist
        - Wishlist
      summary: Returns the entire wishlist of a user
      parameters:
        - in: path
          name: email
          required: true
          description: Email of the tourist
          schema:
            type: string
      responses:
        "200":
          description: Successfully fetched wishlist products
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          description: The unique identifier for the product
                          example: "6727d4a9c143ff8b82b5786a"
                        seller_id:
                          type: string
                          description: The unique identifier for the seller
                          example: "6727d4a9c143ff8b82b57868"
                        comments:
                          type: array
                          items:
                            type: string
                            description: List of comment IDs related to the product
                            example:
                              - "6727d4d1c143ff8b82b57b80"
                              - "6727d4dfc143ff8b82b57fee"
                        name:
                          type: string
                          description: Name of the product
                          example: "Unbranded Cotton Chair"
                        description:
                          type: string
                          description: A detailed description of the product
                          example: "The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality"
                        picture:
                          type: string
                          description: URL to the product image
                          example: "https://loremflickr.com/2916/1546?lock=6488587091388677"
                        price:
                          type: integer
                          description: Price of the product
                          example: 2628
                        quantity:
                          type: integer
                          description: Available quantity of the product
                          example: 639
                        sales:
                          type: integer
                          description: Total sales of the product
                          example: 10357
                        average_rating:
                          type: number
                          format: float
                          description: Average rating of the product
                          example: 3.6
                        archieve_flag:
                          type: boolean
                          description: Flag indicating if the product is archived
                          example: false
                        tourist_id:
                          type: array
                          items:
                            type: string
                          description: List of tourist IDs associated with the product (if any)
                          example: []
                        createdAt:
                          type: string
                          format: date-time
                          description: Product creation timestamp
                          example: "2024-11-03T19:53:13.610Z"
                        updatedAt:
                          type: string
                          format: date-time
                          description: Product last updated timestamp
                          example: "2024-11-03T19:54:47.849Z"
                        __v:
                          type: integer
                          description: Internal version field (for Mongoose)
                          example: 5
                  message:
                    type: string
                    example: "Returning product inside wishlist"
                  status:
                    type: integer
                    example: 200
        "404":
          description: Could not find tourist using the email

  /api/tourist/addAddress/{email}:
    put:
      tags:
        - Tourist
      summary: Adds an address to the tourist. Duplicates are allowed.
      parameters:
        - in: path
          name: email
          required: true
          description: Email of the tourist
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                street_name:
                  type: string
                  example: "El sa3ada"
                apartment_number:
                  type: string
                  example: "4B"
                city:
                  type: string
                  example: "Cairo"
                country:
                  type: string
                  example: "om el donia"
                postal_code:
                  type: integer
                  example: 12345
              required:
                - street_name
                - apartment_number
                - city
                - country
      responses:
        200:
          description: Successfully added address
        400:
          description: The address does not exist i.e the address field was left empty
        404:
          description: Could not find tourist using the email

  /api/tourist/removeAddress/{email}:
    delete:
      tags:
        - Tourist
      summary: Removes an address to the tourist.
      parameters:
        - in: path
          name: email
          required: true
          description: Email of the tourist
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  type: string
                  format: ObjectId
                  example: "674629207275440660e9541d"
      responses:
        200:
          description: Successfully deleted address
        400:
          description: The address does not exist or was already deleted
        404:
          description: Could not find tourist using the email
  /api/tourist/getAddresses/{email}:
    get:
      tags:
        - Tourist
      summary: Returns all the addresses for the user
      parameters:
        - in: path
          name: email
          required: true
          description: Email of the tourist
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved the user's addresses
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: "674629207275440660e9541d"
                        street_name:
                          type: string
                          example: "Elm St"
                        apartment_number:
                          type: string
                          example: "4B"
                        city:
                          type: string
                          example: "Alex"
                        country:
                          type: string
                          example: "Masr"
                        postal_code:
                          type: integer
                          example: 12345
                        createdAt:
                          type: string
                          format: date-time
                          example: "2024-11-26T20:01:36.494Z"
                        updatedAt:
                          type: string
                          format: date-time
                          example: "2024-11-26T20:01:36.494Z"
                  message:
                    type: string
                    example: "Returning addresses"
                  status:
                    type: integer
                    example: 200
        400:
          description: The address does not exist or was already deleted
        404:
          description: Could not find tourist using the email
        500:
          description: Internal server error
