openapi: "3.0.0"
info:
  title: Admin API
  version: 1.0.0
  description: API for managing users and categories in the admin panel.
servers:
  - url: http://localhost:3000/api/admin
tags:
  - name: Users
    description: Operations related to user management.
  - name: Categories
    description: Operations related to category management.
  - name: Admin
    description: Admin related operations.
paths:
  /api/admin/getUsers/{page}:
    get:
      tags:
        - Admin
      summary: Retrieve a list of 10 users according to page number.
      parameters:
        - name: page
          in: path
          description: Page number to retrieve.
          required: true
          schema:
            type: integer
            default: 1
      responses:
        "200":
          description: A list of users.
        "500":
          description: Internal Server Error.

  /api/admin/getUserNumbers:
    get:
      tags:
        - Admin
      summary: Returns the number of all users that are registered and have not deleted their account
      responses:
        "200":
          description: Returns a single number
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates whether the request was successful
                    example: true
                  data:
                    type: object
                    properties:
                      numberOfUsers:
                        type: integer
                        description: The total number of users
                        example: 92
                  message:
                    type: string
                    description: A message describing the response
                    example: "Returning user count"
                  status:
                    type: integer
                    description: The status code
                    example: 200
  /api/admin/getUserNumbersForMonth/{year}:
    get:
      tags:
        - Admin
      summary: Returns the number of all users that are registered and have not deleted their account for a specific year
      parameters:
        - name: year
          in: path
          description: The year we want to see our users per month
          required: true
          schema:
            type: integer

      responses:
        "200":
          description: Returns an array of numbers, each number corresponding to the number of users for that month (the first element is Janurary, the second Feburary, and so on)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates whether the request was successful
                    example: true
                  data:
                    type: object
                    properties:
                      usersPerMonth:
                        type: array
                        items:
                          type: integer
                        description: An array of user counts per month for the current year
                        example: [45, 32, 67, 56, 89, 73, 112, 98, 101, 120, 92, 81]
                  message:
                    type: string
                    description: A message describing the response
                    example: "Returning user count of current year"
                  status:
                    type: integer
                    description: The status code
                    example: 200
  /api/admin/searchUser/{username}:
    get:
      tags:
        - Admin
      summary: Search for a user by username.
      parameters:
        - name: username
          in: path
          description: Username to search for.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User found or empty data.
        "404":
          description: User not found.
  /api/admin/deleteUser/{email}:
    delete:
      tags:
        - Admin
      summary: Delete a user by email.
      parameters:
        - name: email
          in: path
          description: Email of the user to be deleted.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User deleted successfully.
        "500":
          description: Internal Server Error.
  /api/admin/createGovernor:
    post:
      tags:
        - Admin
      summary: Create a new governor account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                name:
                  type: string
                phone_number:
                  type: string
                username:
                  type: string
                password:
                  type: string
                nation:
                  type: string
      responses:
        "201":
          description: Governor created successfully.
        "400":
          description: Invalid input.
  /api/admin/createAdmin:
    post:
      tags:
        - Admin
      summary: Create a new admin account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                name:
                  type: string
                phone_number:
                  type: string
                username:
                  type: string
                password:
                  type: string
                nation:
                  type: string
      responses:
        "201":
          description: Admin created successfully.
        "400":
          description: Invalid input.
  /api/admin/createCategory:
    post:
      tags:
        - Categories
      summary: Create a new category.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
      responses:
        "201":
          description: Category created successfully.
        "400":
          description: Invalid input.
  /api/admin/getCategories/{page}:
    get:
      tags:
        - Categories
      summary: Retrieve a paginated list of categories.
      parameters:
        - name: page
          in: path
          description: Page number to retrieve (default is 1).
          required: true
          schema:
            type: integer
            default: 1
      responses:
        "200":
          description: A list of categories.
        "500":
          description: Internal Server Error.
  /api/admin/updateCategory:
    put:
      tags:
        - Categories
      summary: Update an existing category name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldType:
                  type: string
                newType:
                  type: string
      responses:
        "200":
          description: Category updated successfully.
        "404":
          description: Category not found.
        "400":
          description: Invalid input.
  /api/admin/deleteCategory/{type}:
    delete:
      tags:
        - Categories
      summary: Delete a category by name.
      parameters:
        - name: type
          in: path
          description: Name of the category to be deleted.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Category deleted successfully.
        "404":
          description: Category not found.
  /api/admin/createTag:
    post:
      tags:
        - Tags
      summary: Create a new tag.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
      responses:
        "201":
          description: Tag created successfully.
        "400":
          description: Invalid input.
  /api/admin/getTags/{page}:
    get:
      tags:
        - Tags
      summary: Retrieve a paginated list of tags.
      parameters:
        - name: page
          in: path
          description: Page number to retrieve
          required: true
          schema:
            type: integer
            default: 1
      responses:
        "200":
          description: A list of tags.
        "500":
          description: Internal Server Error.
  /api/admin/updateTag:
    put:
      tags:
        - Tags
      summary: Update an existing tag name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldType:
                  type: string
                newType:
                  type: string
      responses:
        "200":
          description: Tag updated successfully.
        "404":
          description: Tag not found.
        "400":
          description: Invalid input.
  /api/admin/deleteTag/{type}:
    delete:
      tags:
        - Tags
      summary: Delete a tag by name.
      parameters:
        - name: type
          in: path
          description: Name of the tag to be deleted.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Tag deleted successfully.
        "404":
          description: Tag not found.
  /api/admin/acceptUser/{email}:
    put:
      tags:
        - Admin
      summary: Accept a user by email.
      parameters:
        - name: email
          in: path
          description: Email of the user to be accepted.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User accepted successfully.
        "404":
          description: User not found.
        "500":
          description: Internal Server Error.
  /api/admin/rejectUser/{email}:
    put:
      tags:
        - Admin
      summary: Reject a user by email.
      parameters:
        - name: email
          in: path
          description: Email of the user to be rejected.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User rejected successfully.
        "404":
          description: User not found.
        "500":
          description: Internal Server Error.
  /api/admin/updateAdmin/{email}:
    put:
      tags:
        - Admin
      summary: Update an admin account by email.
      parameters:
        - name: email
          in: path
          description: Email of the admin to be updated.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newEmail:
                  type: string
                name:
                  type: string
                phone_number:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Admin updated successfully.
        "404":
          description: Admin not found.
        "400":
          description: Invalid input.
  /api/admin/getComplaints:
    get:
      tags:
        - Admin
        - Complaint
      summary: Shows all complaints in the database
      responses:
        "200":
          description: A array of complaints.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Complaint"
        "500":
          description: Internal Server Error.
  /api/admin/getSortComplaintByDate/{page}:
    get:
      tags:
        - Admin
        - Complaint
      summary: Given a page number and a direction to sort, shows 10 complaints sorted by the date
      description: The direction can be 1 for ascending, or -1 for descending
      parameters:
        - name: page
          in: path
          description: Page number to retrieve.
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                direction:
                  type: integer
      responses:
        "200":
          description: Reterived a list of 10 complaints sorted by date successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Complaint"
        "400":
          description: The direction inputted was an invalid one, or there was no direction in the body
        "500":
          description: Internal Server Error.

  /api/admin/getFilterComplaintsByStatus/{page}:
    get:
      tags:
        - Admin
        - Complaint
      summary: Given a page number and a valid status, shows 10 complaints filtered by that status
      parameters:
        - name: page
          in: path
          description: Page number to retrieve.
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filter_status:
                  type: string
                  enum:
                    - Pending
                    - Resolved
      responses:
        "200":
          description: Reterived a list of 10 complaints filtered by status
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Complaint"
        "400":
          description: The filter_status inputted was an invalid one, or there was no filtered_status in the body
        "500":
          description: Internal Server Error.

  /api/admin/getComplaintById/{complaint_id}:
    get:
      tags:
        - Admin
        - Complaint
      summary: Given a complaint id, returns all its information. This is the same data you get when calling getComplaints, so idk why you would call this
      parameters:
        - name: complaint_id
          in: path
          description: The complaint's id
          required: true
          schema:
            type: string
            format: objectId
      responses:
        "200":
          description: All the information about the complaint
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Complaint"
        "500":
          description: Internal Server Error.
  /api/admin/markComplaintResolved/{complaint_id}:
    put:
      tags:
        - Admin
        - Complaint
      summary: Given a complaint, marks it as resolved
      parameters:
        - name: complaint_id
          in: path
          description: The complaint's id
          required: true
          schema:
            type: string
            format: objectId
      responses:
        "200":
          description: Complaint is successfully updated to resolved
        "404":
          description: Could not find the complaint using the complaint_id
        "500":
          description: Internal Server Error.

  /api/admin/markComplaintPending/{complaint_id}:
    put:
      tags:
        - Admin
        - Complaint
      summary: Given a complaint, marks it as pending
      parameters:
        - name: complaint_id
          in: path
          description: The complaint's id
          required: true
          schema:
            type: string
            format: objectId
      responses:
        "200":
          description: Complaint is successfully updated to pending
        "404":
          description: Could not find the complaint using the complaint_id
        "500":
          description: Internal Server Error.
  /api/admin/replyComplaint/{complaint_id}:
    put:
      tags:
        - Admin
        - Complaint
      summary: Given a complaint id, add a reply to it
      parameters:
        - name: complaint_id
          in: path
          description: The complaint's id
          required: true
          schema:
            type: string
            format: objectId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reply:
                  type: string
      responses:
        "200":
          description: Complaint reply has been added
        "400":
          description: "The reply was not included in the request body"
        "404":
          description: Could not find the complaint using the complaint_id
        "500":
          description: Internal Server Error.
  /api/admin/getSalesReport:
    get:
      tags:
        - Admin
      summary: Get the sales report of the website
      parameters:
        - name: start_date
          in: query
          description: The start date of the sales report
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          description: The end date of the sales report
          schema:
            type: string
            format: date
      responses:
        "200":
          description: Sales report successfully retrieved
        "500":
          description: Internal Server Error.

  /api/admin/createPromoCode:
    post:
      tags:
        - Admin
      summary: Given a duration (in days) for the promocode, and its discount value, it returns a unique promocode.
        The expiry date is set to be the date from today plus the duration, at the very end of the day (midnight)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                numberOfDays:
                  type: string
                  description: The number of days for which the discount applies
                  example: "2"
                discount:
                  type: string
                  description: The discount percentage (e.g., "20" for 20% off)
                  example: "20"
      responses:
        "200":
          description: Discount code generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates if the discount code was successfully generated
                    example: true
                  data:
                    type: object
                    properties:
                      promoCode:
                        type: string
                        description: The generated promo code
                        example: "tamnx0zlb7h"
                  message:
                    type: string
                    description: A message describing the result
                    example: "Code successfully generated!"
                  status:
                    type: integer
                    description: The HTTP status code
                    example: 200
        "400":
          description: "Either the discount number was greater than 100, the duration inserted is zero/negative, or either of those are empty"
components:
  schemas:
    Complaint:
      type: object
      properties:
        complaint_id:
          type: string
          format: objectId
          description: The ID of the complaint
        tourist_name:
          type: object
          properties:
            _id:
              type: string
              format: objectId
            user_id:
              type: object
              properties:
                _id:
                  type: string
                  format: objectId
                name:
                  type: string
                  description: The name that you want :)
        title:
          type: string
          description: The title of the complaint
        body:
          type: string
          description: The body of the complaint
        reply:
          type: string
          description: The reply from the admin (optional)
        date:
          type: string
          format: date-time
          description: The date the complaint was created
        status:
          type: string
          enum:
            - Pending
            - Resolved
          description: The current status of the complaint
        createdAt:
          type: string
          format: date-time
          description: The date the complaint was created
